{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { generateId } from \"../helpers/generateId\";\nconst initialState = {\n  todos: [],\n  maxTodoLength: 20\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        ...action.payload,\n        id: generateId()\n      };\n      state.todos = [...state.todos, newTodo];\n    },\n    updateTodo: (state, action) => {\n      const updatedTodoIndex = state.todos.findIndex(el => el.id === action.payload.id);\n      if (updatedTodoIndex !== -1) {\n        state.todos[updatedTodoIndex] = {\n          ...state.todos[updatedTodoIndex],\n          ...action.payload\n        };\n      }\n    },\n    deleteTodo: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      state.todos = state.todos.filter(el => el.id !== id);\n    }\n  }\n});\nexport const {\n  addTodo,\n  updateTodo,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","generateId","initialState","todos","maxTodoLength","todoSlice","name","reducers","addTodo","state","action","newTodo","payload","id","updateTodo","updatedTodoIndex","findIndex","el","deleteTodo","filter","actions","reducer"],"sources":["/Users/apikosoftwareproperty792/Desktop/Work/TodoProject/src/redux/TodoReducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { ITodo } from \"../types/todo\"\nimport { generateId } from \"../helpers/generateId\"\n\n\nconst initialState: TodosInitialState = {\n  todos: [],\n  maxTodoLength: 20\n}\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<Omit<ITodo, 'id'>>) => {\n      const newTodo = { ...action.payload, id: generateId() }\n      state.todos = [...state.todos, newTodo]\n    },\n    updateTodo: (state, action: PayloadAction<Partial<ITodo>>) => {\n      const updatedTodoIndex = state.todos.findIndex(el => el.id === action.payload.id)\n\n      if (updatedTodoIndex !== -1) {\n        state.todos[updatedTodoIndex] = { ...state.todos[updatedTodoIndex], ...action.payload }\n      }\n\n    },\n    deleteTodo: (state, action: PayloadAction<{ id: string }>) => {\n      const { id } = action.payload\n      state.todos = state.todos.filter(el => el.id !== id)\n    },\n  }\n})\n\nexport interface TodosInitialState {\n  todos: ITodo[]\n  maxTodoLength: number\n}\n\nexport const { addTodo, updateTodo, deleteTodo } = todoSlice.actions\nexport default todoSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;AAGlD,MAAMC,YAA+B,GAAG;EACtCC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACnCM,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAwC,KAAK;MAC5D,MAAMC,OAAO,GAAG;QAAE,GAAGD,MAAM,CAACE,OAAO;QAAEC,EAAE,EAAEZ,UAAU,CAAC;MAAE,CAAC;MACvDQ,KAAK,CAACN,KAAK,GAAG,CAAC,GAAGM,KAAK,CAACN,KAAK,EAAEQ,OAAO,CAAC;IACzC,CAAC;IACDG,UAAU,EAAEA,CAACL,KAAK,EAAEC,MAAqC,KAAK;MAC5D,MAAMK,gBAAgB,GAAGN,KAAK,CAACN,KAAK,CAACa,SAAS,CAACC,EAAE,IAAIA,EAAE,CAACJ,EAAE,KAAKH,MAAM,CAACE,OAAO,CAACC,EAAE,CAAC;MAEjF,IAAIE,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC3BN,KAAK,CAACN,KAAK,CAACY,gBAAgB,CAAC,GAAG;UAAE,GAAGN,KAAK,CAACN,KAAK,CAACY,gBAAgB,CAAC;UAAE,GAAGL,MAAM,CAACE;QAAQ,CAAC;MACzF;IAEF,CAAC;IACDM,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAqC,KAAK;MAC5D,MAAM;QAAEG;MAAG,CAAC,GAAGH,MAAM,CAACE,OAAO;MAC7BH,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACgB,MAAM,CAACF,EAAE,IAAIA,EAAE,CAACJ,EAAE,KAAKA,EAAE,CAAC;IACtD;EACF;AACF,CAAC,CAAC;AAOF,OAAO,MAAM;EAAEL,OAAO;EAAEM,UAAU;EAAEI;AAAW,CAAC,GAAGb,SAAS,CAACe,OAAO;AACpE,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}